{
	"info": {
		"_postman_id": "f6006187-b915-4e7e-ab9f-722778b671f4",
		"name": "Mayorova Categories Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25743167"
	},
	"item": [
		{
			"name": "lecture-1 (Look description for this folder pls)",
			"item": [
				{
					"name": "Super Admin's Actions",
					"item": [
						{
							"name": "Create new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var admin_username1 = pm.response.json().username\r",
											"pm.collectionVariables.set(\"admin_username1\", admin_username1);\r",
											"\r",
											"var email = pm.response.json().email\r",
											"pm.collectionVariables.set(\"email\", email);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin_Mayorova{{$timestamp}}\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayorova\",\r\n    \"email\": \"daria.{{$timestamp}}.mayorova@quantori.academy\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new admin (previously used email)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"email\");\r",
											"pm.collectionVariables.unset(\"admin_username1\");\r",
											"pm.collectionVariables.unset(\"super_admin_token\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{admin_username1}}\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayor\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{super_admin_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let host = pm.collectionVariables.get(\"host\");",
									"",
									"pm.sendRequest(",
									"    {",
									"        url: `${host}/api/v1/session`,",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                \"username\": \"admin\",",
									"                \"password\": \"6cXJLPzVLV=Y4h+_\"",
									"                }",
									"            ),",
									"            options: {",
									"                raw: {",
									"                    language: \"json\"",
									"                }",
									"            }",
									"        }",
									"    },",
									"    function (err, response) {",
									"    pm.collectionVariables.set(\"super_admin_token\", response.json().accessToken)",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin's Actions",
					"item": [
						{
							"name": "Get list of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let existing_title = pm.response.json()[0][\"title\"]\r",
											"pm.collectionVariables.set(\"existing_title\", existing_title);\r",
											"\r",
											"// what do you think about idea of checking json in loop is it ok there or redundant? I commented it cause this loop id time consuming.\r",
											"// pm.test(\"Check ID returned\", function () {\r",
											"//     var jsonData = pm.response.json();\r",
											"//     for (let i = 0; i < jsonData.length; i++) {\r",
											"//         element = jsonData[i]\r",
											"//         pm.expect(element).to.have.property(\"id\");\r",
											"//         console.log(element)\r",
											"//     }\r",
											"// });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds Category with invalid symbols in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"\r",
											"pm.test(\"Errors list length is 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Only RU/EN alphabet, space and digits allowed, please change your request\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\":\"!@#$%^&*(.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category with emty title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"\r",
											"pm.test(\"Errors list length is 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Minimum category length is: 3\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category with spaces only in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"\r",
											"pm.test(\"Errors list length 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"You are not allowed to use spaces only\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\":\"   \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category with more than allowed chars in title (101)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"\r",
											"pm.test(\"Errors list length is 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Maximum category length is: 100\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\":\"tSuCq7tYQEDz93i36WlfCXlKV45VeAg2DSkotkn5JO NUrmO6dkv4Ga30C8i94UK ToMGirzUUcgMQXZtrECjs9hWG aQjyFb9t3u\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category with less than allowed chars in title (2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"pm.test(\"Errors list length 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Minimum category length is: 3\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\":\"tS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid key in body to add a category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Please send required fields: title\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"tite\":\"tS\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category with previously used title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let host = pm.collectionVariables.get(\"host\");\r",
											"let token = pm.collectionVariables.get(\"admin_token\")\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: `${host}/api/v1/categories`,\r",
											"        method: 'POST',\r",
											"        header: {\"Authorization\": `Bearer ${token}`},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(\r",
											"                {\r",
											"                \"title\": \"CoursePython 123\" \r",
											"                }\r",
											"            ),\r",
											"            options: {\r",
											"                raw: {\r",
											"                    language: \"json\"\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"    //console.log(response.json().id);\r",
											"    pm.collectionVariables.set(\"idforpost\", response.json().id)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    let host = pm.collectionVariables.get(\"host\");\r",
											"    let token = pm.collectionVariables.get(\"admin_token\")\r",
											"    let idforpost = pm.collectionVariables.get(\"idforpost\")\r",
											"\r",
											"    pm.sendRequest(\r",
											"        {\r",
											"            url: `${host}/api/v1/categories/${idforpost}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\"Authorization\": `Bearer ${token}`}\r",
											"        }\r",
											"    )\r",
											"});\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset(\"idforpost\");// delete variable installed in pre-req"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\":\"CoursePython 123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category min title (3 chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											"let cat_id = pm.response.json().id\r",
											"pm.collectionVariables.set(\"catid\", cat_id);\r",
											"// this request is here to install variable catid and use it in  requests below"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"1Fы\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) Delete Category Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result text checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category max title ( 100 chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											"let cat_id = pm.response.json().id\r",
											"pm.collectionVariables.set(\"catid\", cat_id);\r",
											"// this request is here to install variable catid and use it in  requests below"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"tSuCq7tYQEDz93i36WlfCXlKV45VeAg2DSkotkn5JO NUrmO6dkv4Ga30C8i94UK ToMGirzUUcgMQXZtrECjs9hWG aQjyFb9t3\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result text checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category with cirillic chars in title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											"let cat_id = pm.response.json().id\r",
											"pm.collectionVariables.set(\"catid\", cat_id);\r",
											"// this request is here to install variable catid and use it in  requests below"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Курс по безопасности 1\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) Delete Category Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result text checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Category standart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											"let catid = pm.response.json().id\r",
											"pm.collectionVariables.set(\"catid\", catid);\r",
											"// this request is here to install variable catid and use it in  requests below"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomCity}} {{$randomInt}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by  ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by non-existent  ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"errors is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"errors\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"AntiFishingCourse\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/999999",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title (standart)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"Some Title {{$randomAdjective}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to min (3 chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"bmn\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to max (100 chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"123in3rYuSt28qVM JCymN6q6MyedVk40PNQByIUOAVFvOHeftonbruxTrPRyvlJtOene1G27cz0JBX0fLGKIHSd3WH4RPS9yTg\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"// should we have 3 errors in list ?\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"pm.test(\"Errors list length is 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Minimum category length is: 3\")\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to more than max allowed (101 chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"pm.test(\"Errors list length\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Maximum category length is: 100\")\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"tSuCq7tYQEDz93i36WlfCXlKV45VeAg2DSkotkn5JO NUrmO6dkv4Ga30C8i94UK ToMGirzUUcgMQXZtrECjs9hWG aQjyFb9t3u\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to invalid characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"pm.test(\"Errors list length 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Only RU/EN alphabet, space and digits allowed, please change your request\")\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"!@#$%^&*(\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to only spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"pm.test(\"Errors list length 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"You are not allowed to use spaces only\")\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"   \"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title (ivalid format boolean)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"\r",
											"pm.test(\"Errors list length is 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Parameter should be a string\")\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": true\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to previously used",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"let errors_list = pm.response.json()[\"errors\"]\r",
											"pm.test(\"Errors list length is 1\", function () {\r",
											"    pm.expect(errors_list.length).equals(1)\r",
											"\r",
											"});\r",
											"\r",
											"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
											"pm.test(\"Error text\", function () {\r",
											"    pm.expect(error_txt).equals(\"Title should be unique\")\r",
											"\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"existing_title\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{catid}},\r\n    \"title\": \"{{existing_title}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A deletes Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result text checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A deletes previously deleted Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A deletes non-existent category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/99",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "A gets list of teachers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/teachers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let teacher_id_to_delete = pm.response.json()[\"id\"]\r",
											"pm.collectionVariables.set(\"teacher_id_to_delete\", teacher_id_to_delete);\r",
											"\r",
											"pm.test(\"id is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"username is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"username\");\r",
											"});\r",
											"pm.test(\"email is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"});\r",
											"pm.test(\"firstName is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
											"});\r",
											"pm.test(\"lastName is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
											"});\r",
											"pm.test(\"role is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"role\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"11darya.mayorova@quantori.academy\",\r\n  \"email\": \"1darya.mayorova@quantori.academy\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "A deletes a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.collectionVariables.unset(\"teacher_id_to_delete\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/teachers/{{teacher_id_to_delete}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers",
										"{{teacher_id_to_delete}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"3darya.mayorova@quantori.academy{{$randomAdjective}}.{{$randomInt}}\",\r\n  \"email\": \"{{$randomNoun}}22darya.mayorova@quantori.academy\",\r\n  \"role\": \"student\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let host = pm.collectionVariables.get(\"host\");",
									"",
									"pm.sendRequest(",
									"    {",
									"        url: `${host}/api/v1/session`,",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                \"username\": \"admin_Mayorova\",",
									"                \"password\": \"StrongPassword123!\"",
									"                }",
									"            ),",
									"            options: {",
									"                raw: {",
									"                    language: \"json\"",
									"                }",
									"            }",
									"        }",
									"    },",
									"    function (err, response) {",
									"    pm.collectionVariables.set(\"admin_token\", response.json().accessToken)",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Unathorized actions",
					"item": [
						{
							"name": "Add Category no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomCity}} {{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete category no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/4010",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"4010"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Teacher's actions",
					"item": [
						{
							"name": "Get list of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var id = pm.response.json()[0][\"id\"]\r",
											"pm.collectionVariables.set(\"teacher_catid\", id);// variable to use in next request Get Category by ID"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by  ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{teacher_catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{teacher_catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change category title by teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{teacher_catid}}\",\r\n  \"title\": \"some changes\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"forbidden\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"forbidden\");\r",
											"});\r",
											"pm.collectionVariables.unset('teacher_catid');\r",
											"pm.collectionVariables.unset('teacher_token');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{teacher_catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{teacher_catid}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{teacher_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let host = pm.collectionVariables.get(\"host\");",
									"",
									"pm.sendRequest(",
									"    {",
									"        url: `${host}/api/v1/session`,",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                \"username\": \"daria_teacher\",",
									"                \"password\": \"password\"",
									"                }",
									"            ),",
									"            options: {",
									"                raw: {",
									"                    language: \"json\"",
									"                }",
									"            }",
									"        }",
									"    },",
									"    function (err, response) {",
									"    pm.collectionVariables.set(\"teacher_token\", response.json().accessToken)",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Student's actions",
					"item": [
						{
							"name": "Get a list of Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var id = pm.response.json()[0][\"id\"]\r",
											"pm.collectionVariables.set(\"student_catid\", id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get category by  ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let host = pm.collectionVariables.get(\"host\");\r",
											"let token = pm.collectionVariables.get(\"admin_token\")\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: `${host}/api/v1/categories`,\r",
											"        method: 'POST',\r",
											"        header: {\"Authorization\": `Bearer ${token}`},\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(\r",
											"                {\r",
											"                \"title\": \"CoursePython\" \r",
											"                }\r",
											"            ),\r",
											"            options: {\r",
											"                raw: {\r",
											"                    language: \"json\"\r",
											"                }\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"    //console.log(response.json().id);\r",
											"    pm.collectionVariables.set(\"idforpost\", response.json().id)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{student_catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{student_catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change category title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"forbidden\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"forbidden\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{student_catid}},\r\n  \"title\": \"some changes\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test(\"forbidden\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"forbidden\");\r",
											"});\r",
											"pm.collectionVariables.unset('student_catid');\r",
											"pm.collectionVariables.unset('student_token');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{student_catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{student_catid}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{student_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let host = pm.collectionVariables.get(\"host\");",
									"",
									"pm.sendRequest(",
									"    {",
									"        url: `${host}/api/v1/session`,",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                \"username\": \"daria_student\",",
									"                \"password\": \"password\"",
									"                }",
									"            ),",
									"            options: {",
									"                raw: {",
									"                    language: \"json\"",
									"                }",
									"            }",
									"        }",
									"    },",
									"    function (err, response) {",
									"    pm.collectionVariables.set(\"student_token\", response.json().accessToken)",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Some changes in \"lesson-1\" folder: I decided to follow your advice about not using pre and post requests in requests that's why \"lesson-1\" folder was reorginized. I decided to refuse from samples and create post requests (Post-req) cause the results of checks is more readable. (I used pre-request and post requst scripts when I send you collection in the first time). Getting tokens scripts were setted up in a folder's pre-req tab. Extra request were moved to the folder \"DO NOT RUN additional actions\" to make collection more clear."
		},
		{
			"name": "lecture-2",
			"item": [
				{
					"name": "Teacher's actions",
					"item": [
						{
							"name": "Happy path",
							"item": [
								{
									"name": "T gets list of Categories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"let id1 = pm.response.json()[0][\"id\"]\r",
													"pm.collectionVariables.set(\"teacher_catid\", id1);\r",
													"\r",
													"let id2 = pm.response.json()[1][\"id\"]\r",
													"pm.collectionVariables.set(\"teacher_catid_to_change\", id2)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/categories",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "T gets list of courses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T adds a course in category",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// checking returned body structure. The same tests will be added to Patch course since course is the same entity\r",
													"pm.test(\"Check ID returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"});\r",
													"pm.test(\"Check title returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"title\");\r",
													"});\r",
													"pm.test(\"Check categoryId returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"categoryId\");\r",
													"});\r",
													"pm.test(\"Check description returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"description\");\r",
													"});\r",
													"pm.test(\"Check visible returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"visible\");\r",
													"});\r",
													"pm.test(\"Check createdAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
													"});\r",
													"pm.test(\"Check updatedAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"course_id\", id);// variable to use in next requests\r",
													"var catid = pm.response.json()[\"categoryId\"]\r",
													"pm.collectionVariables.set(\"category_id\", catid);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"%$#$() {{$randomCountry}}Квантори\",\r\n  \"description\": \"jVVodXXАzA2J7R2SU(iu2HQVqVZ4sdEAGmhL%QYUSX(^Sqhd*18a&imWQn4eP6*cTm4IpNkerа%NCвsвIh%w2S4WcHа3YgI4Y206WyGFAC*oaSNБ^\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T gets a course by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates title of the course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Check ID returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"});\r",
													"pm.test(\"Check title returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"title\");\r",
													"});\r",
													"pm.test(\"Check categoryId returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"categoryId\");\r",
													"});\r",
													"pm.test(\"Check description returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"description\");\r",
													"});\r",
													"pm.test(\"Check visible returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"visible\");\r",
													"});\r",
													"pm.test(\"Check createdAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
													"});\r",
													"pm.test(\"Check updatedAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"some chages {{$randomNoun}}_)(*?::%;123 Квантори\",\r\n  \"description\": \"jVVodXXАzA2J7R2SU(iu2HQVqVZ4sdEAGmhL%QYUSX(^Sqhd*18a&imWQn4eP6*cTm4IpNkerа%NCвsвIh%w2S4WcHа3YgI4Y206WyGFAC*oaSNБ^MiB Tye5gWzmiOayh&ZzloRncmFSj4mkа*QODwpjKW8IrA%n9^yX9Hc6вwvАZlFzБJZZ&vo2RfB617rER*jF%%E\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates CategoryId in course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"some chages {{$randomNoun}}_)(*?::%;123 Квантори\",\r\n  \"description\": \"jVVodXXАzA2J7R2SU(iu2HQVqVZ4sdEAGmhL%QYUSX(^Sqhd*18a&imWQn4eP6*cTm4IpNkerа%NCвsвIh%w2S4WcHа3YgI4Y206WyGFAC*oaSNБ^MiB Tye5gWzmiOayh&ZzloRncmFSj4mkа*QODwpjKW8IrA%n9^yX9Hc6вwvАZlFzБJZZ&vo2RfB617rER*jF%%E\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid_to_change}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T deletes a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "T adds invisible course",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"course_id\", id);// variable to use in next requests\r",
													"var catid = pm.response.json()[\"categoryId\"]\r",
													"pm.collectionVariables.set(\"category_id\", catid);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"InvisibleVisible\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": false,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates course to visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"InvisibleVisible\",\r\n  \"description\": \"some description\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates course to invisible",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"invisible_course_id\", id);// variable to use in next requests\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"InvisibleVisible\",\r\n  \"description\": \"some description\",\r\n  \"visible\": false,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T gets invisible course by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// I guess that if teacher have no opportunity to see invisible courses it's a bug. Definetely student should not see invisible courses. So let teacher have opportunity to see invisible courses/ Have some notes about it in my checklist"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{invisible_course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{invisible_course_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "T deletes invisible course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{invisible_course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{invisible_course_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BV",
							"item": [
								{
									"name": "T adds a min title (3) course in category Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//response body checking \r",
													"pm.test(\"Check title value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.title).to.eql(\"Раз\");\r",
													"});\r",
													"pm.test(\"Check description value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.description).to.eql(\"Some discription\");\r",
													"});\r",
													"pm.test(\"Check visible value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.visible).to.eql(true);\r",
													"});\r",
													"pm.test(\"Check id returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"});\r",
													"pm.test(\"Check createdAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
													"});\r",
													"pm.test(\"Check updatedAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"course_id\", id);// variable to use in next requests\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Раз\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates max title (100) course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//response body checking \r",
													"pm.test(\"Check title value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.title).to.eql(\"зеЁп  гДВdА2ДБз1ВВАБd(зпг*гА%%*п*3*&жdгоd*пВ*зc%А1жb з*Бb&^з*Ё*АДеВД1&зВ%оБжД&3оbеВБ*2*В(ВжДa%a(b%Бз\");\r",
													"});\r",
													"pm.test(\"Check description value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.description).to.eql(\"Some description\");\r",
													"});\r",
													"pm.test(\"Check visible value\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.visible).to.eql(true);\r",
													"});\r",
													"pm.test(\"Check id returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"});\r",
													"pm.test(\"Check createdAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
													"});\r",
													"pm.test(\"Check updatedAt returned\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"зеЁп  гДВdА2ДБз1ВВАБd(зпг*гА%%*п*3*&жdгоd*пВ*зc%А1жb з*Бb&^з*Ё*АДеВД1&зВ%оБжД&3оbеВБ*2*В(ВжДa%a(b%Бз\",\r\n  \"description\": \"Some description\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates min (3) description course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Changing is displayed\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.title).to.eql(\"one\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"one\",\r\n  \"description\": \"Som\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates max (500) description course Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Changing is displayed\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.title).to.eql(\"one\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"one\",\r\n  \"description\": \"пa2Д&&bг32оАa^пп(*bоaео^*г *Ё3В1пеВa3БcВ1Бbое2*жЁ1БДА2(п2жп& зАБЁ3a%2Ё(зdb^ %еогпД3г(3^%пada%жзжж^БВ&Вcdж зжЁ3БdВ2ДdВ31aВеaжАc А^2оо(%ab&b2В2Ёп &*^оbЁ*aa*о*Д*(А(ж%*о3%пжБе(aa123^оо^Ё%зd *cД г%Ё*п1зА3 (&ЁжДАД^a1еcbеДгАжВ^2%bБо*ж%^г3ДbВ1d1^2еdпЁБ1Б&жзп^Ёab3ЁЁжАaАЁ*2Ажaж* гaЁ3Ё1& 3aз2Дгж^еБ(зaВВ2е aЁ*%*2В2dДе(жжВ&Д Б1Б(a1жd3гпз%ЁБc3Ё%г&жА^Ё^*пАг(Д г2ВзЁ2 оое&da пББ(3жпБab ((%aгВ*c1^ое1зБ*1А Аж2БЁ3aЁ3з%(о&Дd^3%b&ЁпзВd^a 1Д1%з%(1Б* 1bd*aБе2е&о **&оdЁозо%1Ёж(d% 2^3&& (3c*2aa%еж1&пЁ%ВbАоЁЁ1&В2aпА(Аbc3\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean Data. T deletes a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "T adds max title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"course_id\", id);// variable to use in next requests\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"зеЁп  гДВdА2ДБз1ВВАБd(зпг*гА%%*п*3*&жdгоd*пВ*зc%А1жb з*Бb&^з*Ё*АДеВД1&зВ%оБжД&3оbеВБ*2*В(ВжДa%a(b%Бз\",\r\n  \"description\": \"str\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates min title course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Changing is displayed\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.title).to.eql(\"one\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"one\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean Data. T deletes a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Provide boundary values analysis in this folder"
						},
						{
							"name": "Neagtive teacher's actions",
							"item": [
								{
									"name": "T gets deleted course by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Error message checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "T gets  course by non existent ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Error message checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/9999999",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"9999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "T deletes deleted course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Unable to find course record(s)\");\r",
													"});\r",
													"// should be discussed  as u sad 400 erorr can be appropriate cause it does not matter for user 400 or 404 error appears. More important that it appears. "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "T deletes non existent course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Unable to find course record(s)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/9999",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"9999"
											]
										}
									},
									"response": []
								},
								{
									"name": "T adds a course in non existent category",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Unable to find category record(s)\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomCountry}}\",\r\n  \"description\": \"no123\",\r\n  \"visible\": true,\r\n  \"categoryId\": 9000\r\n}\r\n//9000 non existent ID ",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T inputs less than allowed characters in course title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message text\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"1\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T uses only spaces in course title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"// struktura otveta\r",
													"\r",
													"pm.test(\"Error message text\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"You are not allowed to use spaces only\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"   \",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}\r\n// only spaces in title",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T uses more than allowed symbols in course title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"// struktura otveta\r",
													"\r",
													"pm.test(\"Error message text\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Maximum course title length is: 100\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"101char  cc( %пbВВое^3^Б%БaогогпзДВ2еД^з112ВАc2опзЁ1(3о3Б %А^о1c22Аоc* ДЁaзd%В&гз^оd(Ё^21(о(пж2Б*(^&^\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T leaves title course  empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"// too many errors messages. we should have just one as \"Parameter should be a string\" or \"Minimum course title length is: 3\". Oh, that's feature maybe\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"pm.test(\"Errors list length\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Minimum course title length is: 3\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}\r\n// title is empty",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null title course",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Here  a null is in body. It can be too many errors message here or may be we should have all of these error messages. Oh, that's feature maybe again\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Parameter should be a string\")\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": null,\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Pre-req) T adds a course",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"course_id\", id);// variable to use in next requests\r",
													"var catid = pm.response.json()[\"categoryId\"]\r",
													"pm.collectionVariables.set(\"category_id\", catid);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"Раз\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates CategoryId to non existent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Unable to find category record(s)\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"one\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": 9999\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "CategoryId is null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// And again, null is in body. It can be too many errors message here or may be we should have all of these error messages. \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Parameter should be numeric\")\r",
													"\r",
													"});\r",
													"// i guess we should have only one error message (first message)\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"one\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates  title by inputting less than allowed chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Minimum course title length is: 3\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"12\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates  title only spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"You are not allowed to use spaces only\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"   \",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates title using more than allowed characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Maximum course title length is: 100\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"101char  cc( %пbВВое^3^Б%БaогогпзДВ2еД^з112ВАc2опзЁ1(3о3Б %А^о1c22Аоc* ДЁaзd%В&гз^оd(Ё^21(о(пж2Б*(^&^\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates title to empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// the same question about error messages and their amount\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Minimum course title length is: 3\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates title to null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// and question about error messages and their amount causeb by null\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Parameter should be a string\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": null,\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates using non existent id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"Unable to find course record(s)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 9999,\r\n  \"title\": \"string\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "Null in id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": null,\r\n  \"title\": \"string\",\r\n  \"description\": \"Some discription\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates description inpitting less than allowed chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//prohibited to use only spaces in description\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Minimum course description length is: 3\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"string\",\r\n  \"description\": \"12\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates description inputting more than allowed chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Maximum course description length is: 500\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"string\",\r\n  \"description\": \"501сhar TF4m68UMuАQFXWHBгY3ny8АKMEvo11VTzkV1rsRА3CгAmRPtJ5M80XZ4ZOqOгHБoqU3rPU7Io7Бx8 4CCZ4Ew4FAБzzPFNZSoR4lo3H5FAWO2АА0q4NkymWK7wSyTБpZlKTSCGA7mFАSZDCsSS2s0QАBOwHq3дDs qв y AONtB2QO4JI5вZVtvY0QV QJRU7 Alz4IBKA8qM1L70lOJnrtvk9KR7yn6RlVN2x20вY9xASQDвZuMyy4AnSuXqo LAБvnzCGг2rpRMp3DsH3yгCXkH1pJZ7HxI5Ow6PrHPqYБOCkIWPDsyKQpгv68S9MY yJSYtZpVxMR6q1д1FHYJOMV4L6qIJAN8IZK0Q0256 uX4дLyMCMpy3HPlBxдMZOvOsSгААkА 5SkQ8LUDYгs7J3m GCqLR7oZPKJ6RA2wMD0JlRw 1XAд7uCRLl 7FO3mYT7А WlY9vN3rwPwR6oxsБsSLG7NzвpntгАJPsKxs3qБ\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates description by using only spaces",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"You are not allowed to use spaces only\")\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"Раз\",\r\n  \"description\": \"   \",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates description to empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Minimum course description length is: 3\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"some\",\r\n  \"description\": \"\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "T updates description to null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// null question again. What errors or errors should appear?\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"let errors_list = pm.response.json()[\"errors\"]\r",
													"\r",
													"pm.test(\"Errors list length is 1\", function () {\r",
													"    pm.expect(errors_list.length).equals(1)\r",
													"\r",
													"});\r",
													"\r",
													"let error_txt = pm.response.json()[\"errors\"][0][\"msg\"]\r",
													"\r",
													"pm.test(\"Error text\", function () {\r",
													"    pm.expect(error_txt).equals(\"Parameter should be a string\")\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{course_id}},\r\n  \"title\": \"some\",\r\n  \"description\": null,\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Post-req)T deletes a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{course_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{course_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{teacher_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let host = pm.collectionVariables.get(\"host\");",
									"",
									"pm.sendRequest(",
									"    {",
									"        url: `${host}/api/v1/session`,",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                \"username\": \"daria_teacher\",",
									"                \"password\": \"password\"",
									"                }",
									"            ),",
									"            options: {",
									"                raw: {",
									"                    language: \"json\"",
									"                }",
									"            }",
									"        }",
									"    },",
									"    function (err, response) {",
									"    pm.collectionVariables.set(\"teacher_token\", response.json().accessToken)",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Student's actions",
					"item": [
						{
							"name": "Student's Happy Path",
							"item": [
								{
									"name": "S gets list of courses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Pre-req) T adds a course in category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// send this request to set a variable for course id to send it in path in next request \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"scourse_id\", id);// variable to use in next requests\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomColor}}\",\r\n  \"description\": \"no123\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "S gets a course by ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{scourse_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{scourse_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Post-req)T deletes a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});\r",
													"pm.collectionVariables.unset(\"scourse_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{scourse_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{scourse_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative student's checks",
							"item": [
								{
									"name": "(Pre-req) T adds invisible course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// send this request to set a variable for course id to send it in path in next request \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"invisible_scourse_id\", id);// variable to use in next requests\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let host = pm.collectionVariables.get(\"host\");\r",
													"\r",
													"pm.sendRequest(\r",
													"    {\r",
													"        url: `${host}/api/v1/session`,\r",
													"        method: 'POST',\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(\r",
													"                {\r",
													"                \"username\": \"daria_teacher\",\r",
													"                \"password\": \"password\"\r",
													"                }\r",
													"            ),\r",
													"            options: {\r",
													"                raw: {\r",
													"                    language: \"json\"\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    },\r",
													"    function (err, response) {\r",
													"    pm.collectionVariables.set(\"teacher_token\", response.json().accessToken)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomColor}}{{$randomInt}}\",\r\n  \"description\": \"no123\",\r\n  \"visible\": false,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "S gets invisible course by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{invisible_scourse_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{invisible_scourse_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Post-req)T deletes a course Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let host = pm.collectionVariables.get(\"host\");\r",
													"\r",
													"pm.sendRequest(\r",
													"    {\r",
													"        url: `${host}/api/v1/session`,\r",
													"        method: 'POST',\r",
													"        body: {\r",
													"            mode: 'raw',\r",
													"            raw: JSON.stringify(\r",
													"                {\r",
													"                \"username\": \"daria_teacher\",\r",
													"                \"password\": \"password\"\r",
													"                }\r",
													"            ),\r",
													"            options: {\r",
													"                raw: {\r",
													"                    language: \"json\"\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    },\r",
													"    function (err, response) {\r",
													"    pm.collectionVariables.set(\"teacher_token\", response.json().accessToken)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{invisible_scourse_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{invisible_scourse_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S adds a course",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Error txt\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"%$#$() {{$randomCountry}}Квантори\",\r\n  \"description\": \"sde\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Pre-req) T adds  course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// send this request to set a variable for course id to send it in path in next request \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"// struktura otveta\r",
													"\r",
													"var id = pm.response.json()[\"id\"]\r",
													"pm.collectionVariables.set(\"scourse_id\", id);// variable to use in next requests\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{$randomColor}}\",\r\n  \"description\": \"no123\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "S updates course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Error txt\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													"// it's weird that the first step is body validation and the second step is an authorization. If the correct body is sent we get 403. If body is wrong we get 400. But it's not a bug it's a feature (:"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{scourse_id}},\r\n  \"title\": \"some chages {{$randomNoun}}_)(*?::%;123 Квантори\",\r\n  \"description\": \"jZ&vo2RfB617rER*jF%%E\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{teacher_catid}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/api/v1/courses",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses"
											]
										}
									},
									"response": []
								},
								{
									"name": "S deletes a course",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.eql(\"This action is forbidden for role student\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.unset(\"invisible_course_id\");\r",
													"pm.collectionVariables.unset(\"category_id\");\r",
													"pm.collectionVariables.unset(\"catid\");\r",
													"pm.collectionVariables.unset(\"teacher_catid_to_change\");\r",
													"pm.collectionVariables.unset(\"teacher_id\");\r",
													"pm.collectionVariables.unset(\"username_student\");\r",
													"pm.collectionVariables.unset(\"invisible_scourse_id\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{scourse_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{scourse_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Post-req)T deletes a course Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response checking\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
													"});\r",
													"pm.collectionVariables.unset(\"course_id\");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{teacher_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{host}}/api/v1/courses/{{scourse_id}}",
											"host": [
												"{{host}}"
											],
											"path": [
												"api",
												"v1",
												"courses",
												"{{scourse_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{student_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let host = pm.collectionVariables.get(\"host\");",
									"",
									"pm.sendRequest(",
									"    {",
									"        url: `${host}/api/v1/session`,",
									"        method: 'POST',",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                \"username\": \"2darya.mayorova@quantori.academy\",",
									"                \"password\": \"password1234\"",
									"                }",
									"            ),",
									"            options: {",
									"                raw: {",
									"                    language: \"json\"",
									"                }",
									"            }",
									"        }",
									"    },",
									"    function (err, response) {",
									"    pm.collectionVariables.set(\"student_token\", response.json().accessToken)",
									"})"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Unauthorized actions",
					"item": [
						{
							"name": "adding course no uth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"%$#$() {{$randomCountry}}Квантори\",\r\n    \"description\": \"jVVodXXАzA2J7R2SU(iu2HQVqVZ4sdEAGmhL%QYUSX(^Sqhd*18a&imWQn4eP6*cTm4IpNkerа%NCвsвIh%w2S4WcHа3YgI4Y206WyGFAC*oaSNБ^\",\r\n    \"visible\": true,\r\n    \"categoryId\": {{teacher_catid}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "getting a cours by ID no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{scourse_id}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{scourse_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getting list of courses no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "updating course no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{scourse_id}},\r\n  \"title\": \"some chages {{$randomNoun}}_)(*?::%;123 Квантори\",\r\n  \"description\": \"jVVodXXАzA2J7R2SU(iu2HQVqVZ4sdEAGmhL%QYUSX(^Sqhd*18a&imWQn4eP6*cTm4IpNkerа%NCвsвIh%w2S4WcHа3YgI4Y206WyGFAC*oaSNБ^MiB Tye5gWzmiOayh&ZzloRncmFSj4mkа*QODwpjKW8IrA%n9^yX9Hc6вwvАZlFzБJZZ&vo2RfB617rER*jF%%E\",\r\n  \"visible\": true,\r\n  \"categoryId\":{{teacher_catid}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleting a course no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"scourse_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/6002",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"6002"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Couple of words about collection:\n\nTo make your checking more convenient I grabbed necessary requests (get tokens, get list of categories) from \"lecture-1\" folder. I would like to say that **it would be better to run only \"lecture-2\"** folder, but possible to run a whole collection. **Comments** were added in some requests **to clarify my point of view**. Although, I've created kind of checklist for myself, I decided not to add it cause postman collection is more detailed. After last lecture my approach was little bit changed, basing on your hints. **Pre and post requests were included in the list of requests** instead of using \"pre-request\" and \"test\" tabs as I used to do.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Lecture-3 (look at the description pls)",
			"item": [
				{
					"name": "1 Admin's actions with category",
					"item": [
						{
							"name": "Get SA token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"super_admin_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var new_admin_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"new_admin_username\", new_admin_username);\r",
											"pm.collectionVariables.unset(\"super_admin_token\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{super_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$timestamp}}admin_Mayorova\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayorova\",\r\n    \"email\": \"{{$timestamp}}daria.mayorova@quantori.academy\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  admin's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking structure of response body\r",
											"pm.test(\"Check accessToken returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"admin_token\", token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{new_admin_username}}\",\r\n    \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// checking structure of response body\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})\r",
											"// install variable for queries below\r",
											"let cat_id = pm.response.json().id\r",
											"pm.collectionVariables.set(\"catid\", cat_id);\r",
											"\r",
											"let title_to_check = pm.response.json().title\r",
											"pm.collectionVariables.set(\"title_to_check\", title_to_check);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$timestamp}} {{$randomColor}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "A gets category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking structure of response body\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"// check that title is displayed clear\r",
											"let title_to_check = pm.collectionVariables.get(\"title_to_check\")\r",
											"pm.test(\"Title checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(title_to_check);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A changes category title to min (3 chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking structure of response body\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"\r",
											"let title_to_check = pm.response.json().title\r",
											"pm.collectionVariables.set(\"title_to_check\", title_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{catid}},\r\n  \"title\": \"bmn\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) To check changes. A gets category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking structure of response body\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"// check that updates are appeared\r",
											"let title_to_check = pm.collectionVariables.get(\"title_to_check\")\r",
											"pm.test(\"Title checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(title_to_check);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "A deletes category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result text checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) Check that category was deleted. A gets category by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.collectionVariables.unset(\"catid\");\r",
											"pm.collectionVariables.unset(\"title_to_check\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories/{{catid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{catid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "**Main actions:** Create admin - Add category by Admin - Admin gets category by ID - Admin changes category title - Admin deletes a ctegory.",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "2 Admin's actions with teacher",
					"item": [
						{
							"name": "Get SA token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"super_admin_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var new_admin_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"new_admin_username\", new_admin_username);\r",
											"pm.collectionVariables.unset(\"super_admin_token\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{super_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$timestamp}}admin_Mayorova\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayorova\",\r\n    \"email\": \"{{$timestamp}}daria.mayorova@quantori.academy\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  admin's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check accessToken returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"admin_token\", token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{new_admin_username}}\",\r\n    \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let teacher_id_e2e = pm.response.json()[\"id\"]\r",
											"pm.collectionVariables.set(\"teacher_id_e2e\", teacher_id_e2e);\r",
											"\r",
											"pm.test(\"id is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"username is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"username\");\r",
											"});\r",
											"pm.test(\"email is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"});\r",
											"pm.test(\"firstName is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
											"});\r",
											"pm.test(\"lastName is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
											"});\r",
											"pm.test(\"role is returned\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"role\");\r",
											"});\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomInt}}darya.mayorova@quantori.academy\",\r\n  \"email\": \"{{$randomInt}}darya.mayorova@quantori.academy\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) A gets list of teachers to check that T was added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// searching a teacher in the list of teachers\r",
											"let teacher_id_e2e = pm.collectionVariables.get(\"teacher_id_e2e\")\r",
											"pm.test(\"Check teacher_ID was added\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    let id_found = false\r",
											"    for (let i = 0; i < jsonData.length; i++) {\r",
											"        let element = jsonData[i]\r",
											"        if (element[\"id\"] == teacher_id_e2e){\r",
											"            id_found = true\r",
											"            break\r",
											"        }\r",
											"    }\r",
											"    pm.expect(id_found).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/teachers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "A deletes a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/teachers/{{teacher_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers",
										"{{teacher_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req) A gets list of teachers to check that T was deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// searching a teacher was deleted from the list of teacher\r",
											"let teacher_id_e2e = pm.collectionVariables.get(\"teacher_id_e2e\")\r",
											"pm.test(\"Check teacher was deleted\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    let id_found = false\r",
											"    for (let i = 0; i < jsonData.length; i++) {\r",
											"        let element = jsonData[i]\r",
											"        if (element[\"id\"] == teacher_id_e2e){\r",
											"            id_found = true\r",
											"            break\r",
											"        }\r",
											"    }\r",
											"    pm.expect(id_found).to.eql(false);\r",
											"});\r",
											"pm.collectionVariables.unset(\"teacher_id_e2e\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/teachers",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						}
					],
					"description": "**Main actions:** Admin creates a teacher - Admin deletes a teacher.",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "3 Teacher's actions with course",
					"item": [
						{
							"name": "Get SA token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"super_admin_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var new_admin_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"new_admin_username\", new_admin_username);\r",
											"pm.collectionVariables.unset(\"super_admin_token\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{super_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$timestamp}}admin_Mayorova\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayorova\",\r\n    \"email\": \"{{$timestamp}}daria.mayorova@quantori.academy\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  admin's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check accessToken returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"admin_token\", token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{new_admin_username}}\",\r\n    \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let teacher_un_e2e = pm.response.json()[\"username\"]\r",
											"pm.collectionVariables.set(\"teacher_un_e2e\", teacher_un_e2e);\r",
											"\r",
											"let teacher_id_e2e = pm.response.json()[\"id\"]\r",
											"pm.collectionVariables.set(\"teacher_id_e2e\", teacher_id_e2e);\r",
											"\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check username is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check email is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check firstName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check lastName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check role is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"role\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomInt}}darya.mayorova@quantori.academy\",\r\n  \"email\": \"{{$randomInt}}darya.mayorova@quantori.academy\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"});\r",
											"pm.test(\"title\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"title\");\r",
											"});\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})\r",
											"\r",
											"let id_to_add_course = pm.response.json().id\r",
											"pm.collectionVariables.set(\"id_to_add_course\", id_to_add_course);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$timestamp}} {{$randomInt}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get teacher's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"teacher_token\", token);\r",
											"\r",
											"pm.test(\"accessToken\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"accessToken\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"teacher_un_e2e\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{teacher_un_e2e}}\",\r\n    \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "T adds a course in category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking returned body structure. The same tests will be added to Patch course since course is the same entity\r",
											"pm.test(\"Check ID returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"pm.test(\"Check categoryId returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"categoryId\");\r",
											"});\r",
											"pm.test(\"Check description returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"description\");\r",
											"});\r",
											"pm.test(\"Check visible returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"visible\");\r",
											"});\r",
											"pm.test(\"Check createdAt returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"});\r",
											"pm.test(\"Check updatedAt returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"});\r",
											"\r",
											"let course_id_e2e = pm.response.json().id\r",
											"pm.collectionVariables.set(\"course_id_e2e\", course_id_e2e);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCountry}}Квантори\",\r\n  \"description\": \"some description\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{id_to_add_course}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req)To check adding a course T gets a course by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "T updates course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check ID returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"pm.test(\"Check categoryId returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"categoryId\");\r",
											"});\r",
											"pm.test(\"Check description returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"description\");\r",
											"});\r",
											"pm.test(\"Check visible returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"visible\");\r",
											"});\r",
											"pm.test(\"Check createdAt returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"});\r",
											"pm.test(\"Check updatedAt returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"});\r",
											"\r",
											"let title_to_check = pm.response.json().title\r",
											"pm.collectionVariables.set(\"title_to_check\", title_to_check);\r",
											"\r",
											"let description_to_check = pm.response.json().description\r",
											"pm.collectionVariables.set(\"description_to_check\", description_to_check);\r",
											"\r",
											"let visible_to_check = pm.response.json().visible\r",
											"pm.collectionVariables.set(\"visible_to_check\", visible_to_check);\r",
											"\r",
											"let categoryId_to_check = pm.response.json().categoryId\r",
											"pm.collectionVariables.set(\"categoryId_to_check\", categoryId_to_check);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{course_id_e2e}},\r\n  \"title\": \"some chages {{$randomNoun}}\",\r\n  \"description\": \"plus\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{id_to_add_course}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req)To check updates T gets a course by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking the content and deleting variables\r",
											"let title_to_check = pm.collectionVariables.get(\"title_to_check\")\r",
											"pm.test(\"Title checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.eql(title_to_check);\r",
											"});\r",
											"let description_to_check = pm.collectionVariables.get(\"description_to_check\")\r",
											"pm.test(\"Description checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.description).to.eql(description_to_check);\r",
											"});\r",
											"let visible_to_check = pm.collectionVariables.get(\"visible_to_check\")\r",
											"pm.test(\"Visible checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.visible).to.eql(visible_to_check);\r",
											"});\r",
											"let categoryId_to_check = pm.collectionVariables.get(\"categoryId_to_check\")\r",
											"pm.test(\"CategoryId checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.categoryId).to.eql(categoryId_to_check);\r",
											"});\r",
											"pm.collectionVariables.unset(\"title_to_check\");\r",
											"pm.collectionVariables.unset(\"description_to_check\");\r",
											"pm.collectionVariables.unset(\"visible_to_check\");\r",
											"pm.collectionVariables.unset(\"categoryId_to_check\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "T deletes a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response checking\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Post-req)To check that course was deleted T gets a course by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean data. A deletes a teacher and category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});\r",
											"\r",
											"let host = pm.collectionVariables.get(\"host\");\r",
											"let token = pm.collectionVariables.get(\"admin_token\")\r",
											"let id_to_add_course = pm.collectionVariables.get(\"id_to_add_course\")\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: `${host}/api/v1/categories/${id_to_add_course}`,\r",
											"        method: 'DELETE',\r",
											"        header: {\"Authorization\": `Bearer ${token}`}\r",
											"    }\r",
											")\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/teachers/{{teacher_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers",
										"{{teacher_id_e2e}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "**Main actions:** Creating an Admin **-** Admin creates a teacher - Admin adds a category - Teacher adds a course in previously added category - Teacher updates a course - Teacher deletes a course",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{teacher_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "4 Student likes\\dislikes a course",
					"item": [
						{
							"name": "Get SA token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"super_admin_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var new_admin_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"new_admin_username\", new_admin_username);\r",
											"pm.collectionVariables.unset(\"super_admin_token\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{super_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomAdjective}}{{$timestamp}}admin_Mayorova\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayorova\",\r\n    \"email\": \"{{$timestamp}}daria.mayorova@quantori.academy\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  admin's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check accessToken returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"    var token = pm.response.json().accessToken\r",
											"    pm.collectionVariables.set(\"admin_token\", token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{new_admin_username}}\",\r\n    \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let teacher_un_e2e = pm.response.json()[\"username\"]\r",
											"pm.collectionVariables.set(\"teacher_un_e2e\", teacher_un_e2e);\r",
											"\r",
											"let teacher_id_e2e = pm.response.json()[\"id\"]\r",
											"pm.collectionVariables.set(\"teacher_id_e2e\", teacher_id_e2e);\r",
											"\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check username is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check email is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check firstName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check lastName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check role is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"role\");\r",
											"})\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{$randomInt}}darya.mayorova@quantori.academy\",\r\n  \"email\": \"{{$randomInt}}darya.mayorova@quantori.academy\",\r\n  \"role\": \"teacher\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get teacher's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"teacher_token\", token);\r",
											"\r",
											"pm.test(\"accessToken\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"accessToken\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.unset(\"teacher_un_e2e\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{teacher_un_e2e}}\",\r\n    \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "A adds category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"})\r",
											"pm.test(\"Check title is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"})\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})\r",
											"\r",
											"let id_to_add_course = pm.response.json().id\r",
											"pm.collectionVariables.set(\"id_to_add_course\", id_to_add_course);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$timestamp}} {{$randomInt}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "T adds a course in category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking returned body structure. \r",
											"pm.test(\"Check ID returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"});\r",
											"pm.test(\"Check title returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"title\");\r",
											"});\r",
											"pm.test(\"Check categoryId returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"categoryId\");\r",
											"});\r",
											"pm.test(\"Check description returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"description\");\r",
											"});\r",
											"pm.test(\"Check visible returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"visible\");\r",
											"});\r",
											"pm.test(\"Check createdAt returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"});\r",
											"pm.test(\"Check updatedAt returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"});\r",
											"\r",
											"let course_id_e2e = pm.response.json().id\r",
											"pm.collectionVariables.set(\"course_id_e2e\", course_id_e2e);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{teacher_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"{{$randomCountry}}Квантори\",\r\n  \"description\": \"some description\",\r\n  \"visible\": true,\r\n  \"categoryId\": {{id_to_add_course}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let student_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"student_username\", student_username);\r",
											"\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check username is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check email is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check firstName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check lastName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check role is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"role\");\r",
											"})\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"2darya.mayorova@quantori.academy{{$randomInt}}{{$randomAdjective}}\",\r\n  \"email\": \"{{$randomNoun}}{{$randomInt}}2darya.mayorova@quantori.academy\",\r\n  \"role\": \"student\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get student's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"student_token\", token);\r",
											"\r",
											"pm.test(\"accessToken\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"accessToken\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{student_username}}\",\r\n    \"password\": \"password1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "S gets a course by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S likes a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result message matches\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You've liked the course\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}/like/yes",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}",
										"like",
										"yes"
									]
								}
							},
							"response": []
						},
						{
							"name": "S gets a course by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Student liked a course\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.likes).to.eql(1);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S dislikes a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result message matches\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You've disliked the course\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}/like/no",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}",
										"like",
										"no"
									]
								}
							},
							"response": []
						},
						{
							"name": "S gets a course by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Student disliked a course\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dislikes).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Student's like was deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.likes).to.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{course_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{course_id_e2e}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clean data. A deletes a teacher  and category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.result).to.eql(\"Success: record was removed.\");\r",
											"});\r",
											"\r",
											"let host = pm.collectionVariables.get(\"host\");\r",
											"let token = pm.collectionVariables.get(\"admin_token\")\r",
											"let id_to_add_course = pm.collectionVariables.get(\"id_to_add_course\")\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: `${host}/api/v1/categories/${id_to_add_course}`,\r",
											"        method: 'DELETE',\r",
											"        header: {\"Authorization\": `Bearer ${token}`}\r",
											"    }\r",
											")\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/teachers/{{teacher_id_e2e}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"teachers",
										"{{teacher_id_e2e}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "**Main actions:** Creating an Admin - Admin creates a teacher - Admin adds a category - Teacher adds a course in previously added category - Admin creates a student - Student likes a course - Student dislike a course.",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{student_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "5 Admin banns\\unbanns student",
					"item": [
						{
							"name": "Get SA token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"super_admin_token\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"6cXJLPzVLV=Y4h+_\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var new_admin_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"new_admin_username\", new_admin_username);\r",
											"pm.collectionVariables.unset(\"super_admin_token\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{super_admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomAdjective}}{{$timestamp}}admin_Mayorova\",\r\n    \"firstName\": \"Daria\",\r\n    \"lastName\": \"Mayorova\",\r\n    \"email\": \"{{$timestamp}}daria.mayorova@quantori.academy\",\r\n    \"password\": \"StrongPassword123!\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get  admin's token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check accessToken returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"\r",
											"var token = pm.response.json().accessToken\r",
											"pm.collectionVariables.set(\"admin_token\", token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{new_admin_username}}\",\r\n    \"password\": \"StrongPassword123!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "A creates a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"let student_id_to_ban = pm.response.json().id\r",
											"pm.collectionVariables.set(\"student_id_to_ban\", student_id_to_ban);\r",
											"\r",
											"let student_username = pm.response.json().username\r",
											"pm.collectionVariables.set(\"student_username\", student_username);\r",
											"\r",
											"pm.test(\"Check id is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check username is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check email is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check firstName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check lastName is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check role is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"role\");\r",
											"})\r",
											"pm.test(\"Check createdAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"})\r",
											"\r",
											"pm.test(\"Check updatedAt is returned\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"2darya.mayorova@quantori.academy{{$randomAdjective}}{{$randomColor}}{{$randomInt}}\",\r\n  \"email\": \"{{$timestamp}}darya.mayorova@quantori.academy\",\r\n  \"role\": \"student\",\r\n  \"firstName\": \"Darya\",\r\n  \"lastName\": \"Mayorova\",\r\n  \"password\": \"password1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "A banns user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let result = pm.response.json().result\r",
											"pm.collectionVariables.set(\"result\", result);\r",
											"\r",
											"let isBanned = pm.response.json().isBanned\r",
											"pm.collectionVariables.set(\"isBanned\", isBanned);\r",
											"\r",
											"let banned_id = pm.response.json().userId\r",
											"pm.collectionVariables.set(\"banned_id\", banned_id);\r",
											"\r",
											"let reason = pm.response.json().userId\r",
											"pm.collectionVariables.set(\"reason\", reason);\r",
											"\r",
											"let createdBy = pm.response.json().createdBy\r",
											"pm.collectionVariables.set(\"createdBy\", createdBy);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reason\": \"Abuse behavior\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/change-user-ban?userId={{student_id_to_ban}}&ban=true",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"change-user-ban"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{student_id_to_ban}}"
										},
										{
											"key": "ban",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "A gets list of banned users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// searching a student in the list banned users\r",
											"let banned_id = pm.collectionVariables.get(\"banned_id\")\r",
											"pm.test(\"Check user was banned\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    let id_found = false\r",
											"    for (let i = 0; i < jsonData.length; i++) {\r",
											"        let element = jsonData[i]\r",
											"        if (element[\"userId\"] == banned_id){\r",
											"            id_found = true\r",
											"            break\r",
											"        }\r",
											"    }\r",
											"    pm.expect(id_found).to.eql(true);\r",
											"});\r",
											"pm.collectionVariables.unset(\"banned_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/banned-users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"banned-users"
									]
								}
							},
							"response": []
						},
						{
							"name": "A unbanns user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Reason txt\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.reason).to.eql(\"test unban reason\");\r",
											"});\r",
											"// I do not know how to check the user name in cretedBy. So it's better to have a check like this than not to have any. And i guess that this key: value (\"reason\": \"empty\", \"createdBy\": \"\") in response body is a feature connected with database behaviour. \r",
											"\r",
											"pm.test(\"Check createdBy is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.createdBy.length).greaterThan(0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"reason\": \"test unban reason\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/change-user-ban?userId={{student_id_to_ban}}&ban=false",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"change-user-ban"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{student_id_to_ban}}"
										},
										{
											"key": "ban",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "A gets list of banned users Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// checking that student is not in the list banned users\r",
											"let banned_id = pm.collectionVariables.get(\"banned_id\")\r",
											"pm.test(\"Check user was banned\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    let id_not_found = true\r",
											"    for (let i = 0; i < jsonData.length; i++) {\r",
											"        let element = jsonData[i]\r",
											"        if (element[\"userId\"] == banned_id){\r",
											"            id_not_found = false\r",
											"            break\r",
											"        }\r",
											"    }\r",
											"    pm.expect(id_not_found).to.eql(true);\r",
											"});\r",
											"pm.collectionVariables.unset(\"student_id_to_ban\");\r",
											"pm.collectionVariables.unset(\"course_id_e2e\");\r",
											"pm.collectionVariables.unset(\"teacher_id_e2e\");\r",
											"pm.collectionVariables.unset(\"teacher_un_e2e\");\r",
											"pm.collectionVariables.unset(\"id_to_add_course\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/banned-users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"banned-users"
									]
								}
							},
							"response": []
						}
					],
					"description": "**Main actions:** Creating an Admin - Admin creates a Student - Admin banns a user - Teacher adds a course in previously added category - Admin creates a student - Student likes a course - Student dislike a course.",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "**Lecture-3 folder**: I tryed to make all e2e scenarios independent thats why each of them starts from the beginning (getting SA token an creating new admin). Authoriztion is installed in folder but when changing auth is necessary method is determined in request. Post-request to check changes are issued in a separate requests and marked as (Pre-req). And \"true\" post-requests to clean database as possible are marked as \"Clean data.\" but there i could not to handle with my wish of using post-requests in \"Tests\" tab. Unfortunately, in spite of my striving, I feel that database was a bit clogged cause there are no endpoints to delete admin and student.\n\nThere were short hints of e2e scenario added in description of each numeric folder. Some comments were added in \"Test\" tabs to make things clear.\n\n**P.S.** During all 3 back-end lessons i've been comparing pros and cons of using pre & post -requests inside the query. (HW which were sendend before illustrate my probations) Despite of that using separate pre and post requests makes things more clear, my heart belongs to using pre & post -requests inside the request to make tests less bulk and more independent. Anyway, being flexible and openminded are necessary to be a team player, that's why I decided to use your \"readable\" approach.\n\nSorry for the longread. Thank you for your time and mentoring!"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "admin_token",
			"value": ""
		},
		{
			"key": "host",
			"value": "http://qa-school-test-api.quantori.academy",
			"type": "string"
		},
		{
			"key": "student_token",
			"value": ""
		},
		{
			"key": "teacher_token",
			"value": ""
		},
		{
			"key": "student_id_to_ban",
			"value": ""
		},
		{
			"key": "ban_status",
			"value": ""
		},
		{
			"key": "result",
			"value": ""
		},
		{
			"key": "isBanned",
			"value": ""
		},
		{
			"key": "reason",
			"value": ""
		},
		{
			"key": "createdBy",
			"value": ""
		},
		{
			"key": "new_admin_username",
			"value": ""
		},
		{
			"key": "student_username",
			"value": ""
		},
		{
			"key": "teacher_id_e2e",
			"value": ""
		},
		{
			"key": "id_to_add_course",
			"value": ""
		},
		{
			"key": "course_id_e2e",
			"value": ""
		},
		{
			"key": "teacher_catid",
			"value": ""
		},
		{
			"key": "course_id",
			"value": ""
		},
		{
			"key": "category_id",
			"value": ""
		},
		{
			"key": "invisible_scourse_id",
			"value": ""
		},
		{
			"key": "student_catid",
			"value": ""
		},
		{
			"key": "teacher_catid_to_change",
			"value": ""
		},
		{
			"key": "catid",
			"value": ""
		},
		{
			"key": "title_to_check",
			"value": ""
		}
	]
}